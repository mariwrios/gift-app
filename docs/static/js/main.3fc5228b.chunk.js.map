{"version":3,"sources":["components/AddCategories.js","helper/getGif.js","hooks/useFetchGift.js","components/GifGridItem.js","components/GiftGrid.js","GifApp.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","placeholder","type","value","onChange","target","getGif","category","a","url","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","useFetchGift","loading","state","setState","useEffect","then","img","GifGridItem","className","src","alt","GifGrid","GifApp","ReactDOM","render","document","getElementById"],"mappings":"qLAwBeA,EArBO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAW3C,OACE,sBAAMC,SALa,SAAAC,GACnBA,EAAEC,iBACFJ,EAAWK,OAAOC,OAAS,GAAKR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,QAG5E,SACE,uBAAOC,YAAY,YAAYC,KAAK,OAAOC,MAAOV,EAAYW,SAVxC,SAAAR,GACxBF,EAAcE,EAAES,OAAOF,a,+BCPdG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,yFAC0EF,EAD1E,sBAGDG,MAAMD,GAHL,cAGdE,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,YACpB,MAAO,CACLC,GAF6C,EAAxBA,GAGrBC,MAH6C,EAApBA,MAIzBR,IAJ6C,EAAbS,OAIpBC,iBAAiBV,QAVb,kBAabK,GAba,4CAAH,sDCoBJM,EAjBM,SAAAb,GAAa,IAAD,EACLf,mBAAS,CACjCqB,KAAM,GACNQ,SAAS,IAHoB,mBACxBC,EADwB,KACjBC,EADiB,KAc/B,OARAC,qBAAU,WACRlB,EAAOC,GAAUkB,MAAK,SAAAC,GAAG,OACvBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IACGe,GCNMK,EATK,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOR,EAAU,EAAVA,IAC5B,OACE,sBAAKmB,UAAU,+DAAf,UACE,qBAAKC,IAAKpB,EAAKqB,IAAKb,IACpB,4BAAIA,QCcKc,EAhBC,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,EACEa,EAAab,GAAvCc,EADwB,EACxBA,QAAeH,EADS,EACfL,KAEjB,OACE,gCACE,6BAAKN,IACJc,GAAW,eACZ,qBAAKO,UAAU,mBAAf,SACGV,EAAOH,KAAI,SAAAW,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIV,aCajBgB,EAtBA,WAAO,IAAD,EACiBxC,mBAAS,CAAC,uBAD3B,mBACZQ,EADY,KACAT,EADA,KAOnB,OACE,qCACE,wCACA,cAAC,EAAD,CAAeA,cAAeA,IAC9B,uBAEA,6BACGS,EAAWe,KAAI,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCbxB0B,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,W","file":"static/js/main.3fc5228b.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst AddCategories = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(``)\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSumbit = e => {\n    e.preventDefault()\n    inputValue.trim().length > 2 && setCategories(categories => [inputValue, ...categories])\n  }\n  return (\n    <form onSubmit={handleSumbit}>\n      <input placeholder=\"Buscar...\" type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nAddCategories.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\nexport default AddCategories\n","export const getGif = async category => {\n  const url = `http://api.giphy.com/v1/gifs/search?api_key=iG2ZzbLSGUbkJjOp1d6U582vDPDJUqpT&q=${category}&limit=12`\n\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n\n  const gifs = data.map(({ id, title, images }) => {\n    return {\n      id: id,\n      title: title,\n      url: images.downsized_medium.url\n    }\n  })\n  return gifs\n}\n","import { useState, useEffect } from \"react\"\nimport { getGif } from \"../helper/getGif\"\n\nconst useFetchGift = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGif(category).then(img =>\n      setState({\n        data: img,\n        loading: false\n      })\n    )\n  }, [category])\n  return state\n}\n\nexport default useFetchGift\n","import React from \"react\"\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\t1s\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React /* { useState, useEffect } */ from \"react\"\nimport useFetchGift from \"../hooks/useFetchGift\"\nimport GifGridItem from \"./GifGridItem\"\n\nconst GifGrid = ({ category }) => {\n  const { loading, data: images } = useFetchGift(category)\n\n  return (\n    <div>\n      <h3>{category}</h3>\n      {loading && \"Loading. . .\"}\n      <div className=\"container__cards\">\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default GifGrid\n","import React, { useState } from \"react\"\nimport AddCategories from \"./components/AddCategories\"\nimport GifGrid from \"./components/GiftGrid\"\n\nconst GifApp = () => {\n  const [categories, setCategories] = useState([\"Sakura Card Captor\"])\n\n  /*const handleAdd = () => {\n    setCategories([...categories, \"Inuyasha\"])\n  }*/\n\n  return (\n    <>\n      <h2>GifApp</h2>\n      <AddCategories setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category}></GifGrid>\n        ))}\n      </ol>\n    </>\n  )\n}\n\nexport default GifApp\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GifApp from \"./GifApp\"\n\nimport \"./index.css\"\n\nReactDOM.render(<GifApp />, document.getElementById(\"root\"))\n"],"sourceRoot":""}